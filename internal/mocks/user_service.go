// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dtos "golang-e-wallet-rest-api/internal/dtos"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// ForgotPassword provides a mock function with given fields: ctx, email
func (_m *UserService) ForgotPassword(ctx context.Context, email string) (*string, error) {
	ret := _m.Called(ctx, email)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetails provides a mock function with given fields: ctx, userId
func (_m *UserService) GetDetails(ctx context.Context, userId int64) (*dtos.UserDetailsResponse, error) {
	ret := _m.Called(ctx, userId)

	var r0 *dtos.UserDetailsResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64) *dtos.UserDetailsResponse); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.UserDetailsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginAccount provides a mock function with given fields: ctx, loginUser
func (_m *UserService) LoginAccount(ctx context.Context, loginUser *dtos.UserLoginRequest) (gin.H, error) {
	ret := _m.Called(ctx, loginUser)

	var r0 gin.H
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.UserLoginRequest) gin.H); ok {
		r0 = rf(ctx, loginUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.H)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dtos.UserLoginRequest) error); ok {
		r1 = rf(ctx, loginUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterAccount provides a mock function with given fields: ctx, registUser
func (_m *UserService) RegisterAccount(ctx context.Context, registUser *dtos.UserRegisterRequest) (*string, error) {
	ret := _m.Called(ctx, registUser)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.UserRegisterRequest) *string); ok {
		r0 = rf(ctx, registUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dtos.UserRegisterRequest) error); ok {
		r1 = rf(ctx, registUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: ctx, resetPwdReq
func (_m *UserService) ResetPassword(ctx context.Context, resetPwdReq *dtos.UserResetPwdRequest) (*string, error) {
	ret := _m.Called(ctx, resetPwdReq)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.UserResetPwdRequest) *string); ok {
		r0 = rf(ctx, resetPwdReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dtos.UserResetPwdRequest) error); ok {
		r1 = rf(ctx, resetPwdReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
