// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "golang-e-wallet-rest-api/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// ResetPasswordTokenRepository is an autogenerated mock type for the ResetPasswordTokenRepository type
type ResetPasswordTokenRepository struct {
	mock.Mock
}

// GetByUserId provides a mock function with given fields: ctx, userId
func (_m *ResetPasswordTokenRepository) GetByUserId(ctx context.Context, userId *int64) (*models.ResetPasswordToken, error) {
	ret := _m.Called(ctx, userId)

	var r0 *models.ResetPasswordToken
	if rf, ok := ret.Get(0).(func(context.Context, *int64) *models.ResetPasswordToken); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResetPasswordToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetToken provides a mock function with given fields: ctx, userId
func (_m *ResetPasswordTokenRepository) ResetToken(ctx context.Context, userId *int64) error {
	ret := _m.Called(ctx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *int64) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTokenByUserId provides a mock function with given fields: ctx, token, userId
func (_m *ResetPasswordTokenRepository) SaveTokenByUserId(ctx context.Context, token *string, userId *int64) error {
	ret := _m.Called(ctx, token, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *string, *int64) error); ok {
		r0 = rf(ctx, token, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupByUserId provides a mock function with given fields: ctx, userId
func (_m *ResetPasswordTokenRepository) SetupByUserId(ctx context.Context, userId *int64) error {
	ret := _m.Called(ctx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *int64) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewResetPasswordTokenRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewResetPasswordTokenRepository creates a new instance of ResetPasswordTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResetPasswordTokenRepository(t mockConstructorTestingTNewResetPasswordTokenRepository) *ResetPasswordTokenRepository {
	mock := &ResetPasswordTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
