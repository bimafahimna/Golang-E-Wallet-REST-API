// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dtos "golang-e-wallet-rest-api/internal/dtos"

	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// GetAllTransactions provides a mock function with given fields: ctx, userId, page
func (_m *TransactionService) GetAllTransactions(ctx context.Context, userId int64, page int) ([]dtos.TransactionsRowResponse, error) {
	ret := _m.Called(ctx, userId, page)

	var r0 []dtos.TransactionsRowResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) []dtos.TransactionsRowResponse); ok {
		r0 = rf(ctx, userId, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.TransactionsRowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int) error); ok {
		r1 = rf(ctx, userId, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopUpBalance provides a mock function with given fields: ctx, userId, topUpReq
func (_m *TransactionService) TopUpBalance(ctx context.Context, userId int64, topUpReq *dtos.TopUpRequest) (*dtos.TransactionResponse, error) {
	ret := _m.Called(ctx, userId, topUpReq)

	var r0 *dtos.TransactionResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64, *dtos.TopUpRequest) *dtos.TransactionResponse); ok {
		r0 = rf(ctx, userId, topUpReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.TransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, *dtos.TopUpRequest) error); ok {
		r1 = rf(ctx, userId, topUpReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferBalance provides a mock function with given fields: ctx, userId, transferReq
func (_m *TransactionService) TransferBalance(ctx context.Context, userId int64, transferReq *dtos.TransferRequest) (*dtos.TransactionResponse, error) {
	ret := _m.Called(ctx, userId, transferReq)

	var r0 *dtos.TransactionResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64, *dtos.TransferRequest) *dtos.TransactionResponse); ok {
		r0 = rf(ctx, userId, transferReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.TransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, *dtos.TransferRequest) error); ok {
		r1 = rf(ctx, userId, transferReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionService(t mockConstructorTestingTNewTransactionService) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
