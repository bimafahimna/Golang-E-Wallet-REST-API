// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	models "golang-e-wallet-rest-api/internal/models"
)

// WalletRepsitory is an autogenerated mock type for the WalletRepsitory type
type WalletRepsitory struct {
	mock.Mock
}

// DecreaseBalance provides a mock function with given fields: ctx, amount, walletNumber
func (_m *WalletRepsitory) DecreaseBalance(ctx context.Context, amount decimal.Decimal, walletNumber int64) error {
	ret := _m.Called(ctx, amount, walletNumber)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, decimal.Decimal, int64) error); ok {
		r0 = rf(ctx, amount, walletNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUserId provides a mock function with given fields: ctx, userId
func (_m *WalletRepsitory) GetByUserId(ctx context.Context, userId int64) (*models.Wallet, error) {
	ret := _m.Called(ctx, userId)

	var r0 *models.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Wallet); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByWalletNumber provides a mock function with given fields: ctx, walletNumber
func (_m *WalletRepsitory) GetByWalletNumber(ctx context.Context, walletNumber int64) (*models.Wallet, error) {
	ret := _m.Called(ctx, walletNumber)

	var r0 *models.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Wallet); ok {
		r0 = rf(ctx, walletNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, walletNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseBalance provides a mock function with given fields: ctx, amount, walletNumber
func (_m *WalletRepsitory) IncreaseBalance(ctx context.Context, amount decimal.Decimal, walletNumber int64) error {
	ret := _m.Called(ctx, amount, walletNumber)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, decimal.Decimal, int64) error); ok {
		r0 = rf(ctx, amount, walletNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupByUserId provides a mock function with given fields: ctx, userId
func (_m *WalletRepsitory) SetupByUserId(ctx context.Context, userId *int64) error {
	ret := _m.Called(ctx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *int64) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewWalletRepsitory interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletRepsitory creates a new instance of WalletRepsitory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletRepsitory(t mockConstructorTestingTNewWalletRepsitory) *WalletRepsitory {
	mock := &WalletRepsitory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
