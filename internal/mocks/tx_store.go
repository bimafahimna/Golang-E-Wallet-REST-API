// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	repositories "golang-e-wallet-rest-api/internal/repositories"

	mock "github.com/stretchr/testify/mock"
)

// TxStore is an autogenerated mock type for the TxStore type
type TxStore struct {
	mock.Mock
}

// TxResetPasswordTokenRepository provides a mock function with given fields:
func (_m *TxStore) TxResetPasswordTokenRepository() repositories.ResetPasswordTokenRepository {
	ret := _m.Called()

	var r0 repositories.ResetPasswordTokenRepository
	if rf, ok := ret.Get(0).(func() repositories.ResetPasswordTokenRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.ResetPasswordTokenRepository)
		}
	}

	return r0
}

// TxSourceOfFundRepository provides a mock function with given fields:
func (_m *TxStore) TxSourceOfFundRepository() repositories.SourceOfFundRepository {
	ret := _m.Called()

	var r0 repositories.SourceOfFundRepository
	if rf, ok := ret.Get(0).(func() repositories.SourceOfFundRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.SourceOfFundRepository)
		}
	}

	return r0
}

// TxTransactionRepository provides a mock function with given fields:
func (_m *TxStore) TxTransactionRepository() repositories.TransactionRepository {
	ret := _m.Called()

	var r0 repositories.TransactionRepository
	if rf, ok := ret.Get(0).(func() repositories.TransactionRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.TransactionRepository)
		}
	}

	return r0
}

// TxUserRepsitory provides a mock function with given fields:
func (_m *TxStore) TxUserRepsitory() repositories.UserRepository {
	ret := _m.Called()

	var r0 repositories.UserRepository
	if rf, ok := ret.Get(0).(func() repositories.UserRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.UserRepository)
		}
	}

	return r0
}

// TxWalletRepository provides a mock function with given fields:
func (_m *TxStore) TxWalletRepository() repositories.WalletRepsitory {
	ret := _m.Called()

	var r0 repositories.WalletRepsitory
	if rf, ok := ret.Get(0).(func() repositories.WalletRepsitory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.WalletRepsitory)
		}
	}

	return r0
}

type mockConstructorTestingTNewTxStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewTxStore creates a new instance of TxStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTxStore(t mockConstructorTestingTNewTxStore) *TxStore {
	mock := &TxStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
