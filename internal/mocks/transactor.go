// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	repositories "golang-e-wallet-rest-api/internal/repositories"

	mock "github.com/stretchr/testify/mock"
)

// Transactor is an autogenerated mock type for the Transactor type
type Transactor struct {
	mock.Mock
}

// WithTransaction provides a mock function with given fields: ctx, fn
func (_m *Transactor) WithTransaction(ctx context.Context, fn repositories.TxFn) (interface{}, error) {
	ret := _m.Called(ctx, fn)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.TxFn) interface{}); ok {
		r0 = rf(ctx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repositories.TxFn) error); ok {
		r1 = rf(ctx, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactor interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactor creates a new instance of Transactor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactor(t mockConstructorTestingTNewTransactor) *Transactor {
	mock := &Transactor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
