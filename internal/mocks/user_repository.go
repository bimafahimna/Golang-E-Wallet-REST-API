// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "golang-e-wallet-rest-api/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) GetByEmail(ctx context.Context, email *string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, *string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, userId
func (_m *UserRepository) GetById(ctx context.Context, userId int64) (*models.User, error) {
	ret := _m.Called(ctx, userId)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseGameAttempt provides a mock function with given fields: ctx, attempts, userId
func (_m *UserRepository) IncreaseGameAttempt(ctx context.Context, attempts int64, userId int64) error {
	ret := _m.Called(ctx, attempts, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, attempts, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAccount provides a mock function with given fields: ctx, user
func (_m *UserRepository) SaveAccount(ctx context.Context, user *models.User) (*int64, error) {
	ret := _m.Called(ctx, user)

	var r0 *int64
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *int64); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveNewPassword provides a mock function with given fields: ctx, newPassword, userId
func (_m *UserRepository) SaveNewPassword(ctx context.Context, newPassword string, userId *int64) error {
	ret := _m.Called(ctx, newPassword, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *int64) error); ok {
		r0 = rf(ctx, newPassword, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
